fun box(): String {
  return test1(str = "TEST", default = 0).plus(other = test1(str = null, default = 0)).plus(other = test2(str = "TEST", fallback = null, default = 0)).plus(other = test2(str = null, fallback = "test", default = 0)).plus(other = test2(str = null, fallback = null, default = 0)).plus(other = test3(str = "TEST")).plus(other = test3(str = null))
}

fun test1(str: String?, default: Int): String {
  return expectThrowableMessage(block = local fun <anonymous>() {
    { // BLOCK
      val tmp0_Explain: String? = str
      val tmp1_Explain: String? = { // BLOCK
        val tmp_0: String? = tmp0_Explain
        when {
          EQEQ(arg0 = tmp_0, arg1 = null) -> null
          else -> tmp_0.lowercase()
        }
      }
      val tmp2_Explain: Int? = { // BLOCK
        val tmp_1: String? = tmp1_Explain
        when {
          EQEQ(arg0 = tmp_1, arg1 = null) -> null
          else -> tmp_1.<get-length>()
        }
      }
      when {
        EQEQ(arg0 = tmp2_Explain, arg1 = null) -> { // BLOCK
          val tmp3_Explain: Int = default
          val tmp4_Explain: Boolean = EQEQ(arg0 = tmp3_Explain, arg1 = 5)
          assert(value = tmp4_Explain, lazyMessage = local fun <anonymous>(): String {
            return "\n" + CallExplanation(offset = 323, source = "    assert((str?.lowercase()?.length ?: default) == 5)", dispatchReceiver = null, extensionReceiver = null, valueArguments = mapOf</* null */, /* null */>(pairs = [Pair</* null */, /* null */>(first = "value", second = ValueArgument(startOffset = 11, endOffset = 53, expressions = listOf</* null */>(elements = [ValueExpression(startOffset = 12, endOffset = 15, displayOffset = 12, value = tmp0_Explain), ValueExpression(startOffset = 12, endOffset = 28, displayOffset = 17, value = tmp1_Explain), ValueExpression(startOffset = 12, endOffset = 36, displayOffset = 30, value = tmp2_Explain), ValueExpression(startOffset = 40, endOffset = 47, displayOffset = 40, value = tmp3_Explain), EqualityExpression(startOffset = 11, endOffset = 53, displayOffset = 49, value = tmp4_Explain, lhs = tmp3_Explain, rhs = 5)])))])).toDefaultMessage()
          }
)
        }
        else -> { // BLOCK
          val tmp5_Explain: Boolean = EQEQ(arg0 = tmp2_Explain, arg1 = 5)
          assert(value = tmp5_Explain, lazyMessage = local fun <anonymous>(): String {
            return "\n" + CallExplanation(offset = 323, source = "    assert((str?.lowercase()?.length ?: default) == 5)", dispatchReceiver = null, extensionReceiver = null, valueArguments = mapOf</* null */, /* null */>(pairs = [Pair</* null */, /* null */>(first = "value", second = ValueArgument(startOffset = 11, endOffset = 53, expressions = listOf</* null */>(elements = [ValueExpression(startOffset = 12, endOffset = 15, displayOffset = 12, value = tmp0_Explain), ValueExpression(startOffset = 12, endOffset = 28, displayOffset = 17, value = tmp1_Explain), ValueExpression(startOffset = 12, endOffset = 36, displayOffset = 30, value = tmp2_Explain), EqualityExpression(startOffset = 11, endOffset = 53, displayOffset = 49, value = tmp5_Explain, lhs = tmp2_Explain, rhs = 5)])))])).toDefaultMessage()
          }
)
        }
      }
    }
  }
)
}

fun test2(str: String?, fallback: String?, default: Int): String {
  return expectThrowableMessage(block = local fun <anonymous>() {
    { // BLOCK
      val tmp0_Explain: String? = str
      val tmp1_Explain: String? = { // BLOCK
        val tmp_2: String? = tmp0_Explain
        when {
          EQEQ(arg0 = tmp_2, arg1 = null) -> null
          else -> tmp_2.lowercase()
        }
      }
      when {
        EQEQ(arg0 = tmp1_Explain, arg1 = null) -> { // BLOCK
          val tmp2_Explain: String? = fallback
          val tmp3_Explain: Int? = { // BLOCK
            val tmp_3: String? = tmp2_Explain
            when {
              EQEQ(arg0 = tmp_3, arg1 = null) -> null
              else -> tmp_3.<get-length>()
            }
          }
          when {
            EQEQ(arg0 = tmp3_Explain, arg1 = null) -> { // BLOCK
              val tmp4_Explain: Int = default
              val tmp5_Explain: Boolean = EQEQ(arg0 = tmp4_Explain, arg1 = 5)
              assert(value = tmp5_Explain, lazyMessage = local fun <anonymous>(): String {
                return "\n" + CallExplanation(offset = 465, source = "    assert(((str?.lowercase() ?: fallback)?.length ?: default) == 5)", dispatchReceiver = null, extensionReceiver = null, valueArguments = mapOf</* null */, /* null */>(pairs = [Pair</* null */, /* null */>(first = "value", second = ValueArgument(startOffset = 11, endOffset = 67, expressions = listOf</* null */>(elements = [ValueExpression(startOffset = 13, endOffset = 16, displayOffset = 13, value = tmp0_Explain), ValueExpression(startOffset = 13, endOffset = 29, displayOffset = 18, value = tmp1_Explain), ValueExpression(startOffset = 33, endOffset = 41, displayOffset = 33, value = tmp2_Explain), ValueExpression(startOffset = 13, endOffset = 50, displayOffset = 44, value = tmp3_Explain), ValueExpression(startOffset = 54, endOffset = 61, displayOffset = 54, value = tmp4_Explain), EqualityExpression(startOffset = 11, endOffset = 67, displayOffset = 63, value = tmp5_Explain, lhs = tmp4_Explain, rhs = 5)])))])).toDefaultMessage()
              }
)
            }
            else -> { // BLOCK
              val tmp6_Explain: Boolean = EQEQ(arg0 = tmp3_Explain, arg1 = 5)
              assert(value = tmp6_Explain, lazyMessage = local fun <anonymous>(): String {
                return "\n" + CallExplanation(offset = 465, source = "    assert(((str?.lowercase() ?: fallback)?.length ?: default) == 5)", dispatchReceiver = null, extensionReceiver = null, valueArguments = mapOf</* null */, /* null */>(pairs = [Pair</* null */, /* null */>(first = "value", second = ValueArgument(startOffset = 11, endOffset = 67, expressions = listOf</* null */>(elements = [ValueExpression(startOffset = 13, endOffset = 16, displayOffset = 13, value = tmp0_Explain), ValueExpression(startOffset = 13, endOffset = 29, displayOffset = 18, value = tmp1_Explain), ValueExpression(startOffset = 33, endOffset = 41, displayOffset = 33, value = tmp2_Explain), ValueExpression(startOffset = 13, endOffset = 50, displayOffset = 44, value = tmp3_Explain), EqualityExpression(startOffset = 11, endOffset = 67, displayOffset = 63, value = tmp6_Explain, lhs = tmp3_Explain, rhs = 5)])))])).toDefaultMessage()
              }
)
            }
          }
        }
        else -> { // BLOCK
          val tmp7_Explain: Int? = { // BLOCK
            val tmp_4: String? = tmp1_Explain
            when {
              EQEQ(arg0 = tmp_4, arg1 = null) -> null
              else -> tmp_4.<get-length>()
            }
          }
          when {
            EQEQ(arg0 = tmp7_Explain, arg1 = null) -> { // BLOCK
              val tmp8_Explain: Int = default
              val tmp9_Explain: Boolean = EQEQ(arg0 = tmp8_Explain, arg1 = 5)
              assert(value = tmp9_Explain, lazyMessage = local fun <anonymous>(): String {
                return "\n" + CallExplanation(offset = 465, source = "    assert(((str?.lowercase() ?: fallback)?.length ?: default) == 5)", dispatchReceiver = null, extensionReceiver = null, valueArguments = mapOf</* null */, /* null */>(pairs = [Pair</* null */, /* null */>(first = "value", second = ValueArgument(startOffset = 11, endOffset = 67, expressions = listOf</* null */>(elements = [ValueExpression(startOffset = 13, endOffset = 16, displayOffset = 13, value = tmp0_Explain), ValueExpression(startOffset = 13, endOffset = 29, displayOffset = 18, value = tmp1_Explain), ValueExpression(startOffset = 13, endOffset = 50, displayOffset = 44, value = tmp7_Explain), ValueExpression(startOffset = 54, endOffset = 61, displayOffset = 54, value = tmp8_Explain), EqualityExpression(startOffset = 11, endOffset = 67, displayOffset = 63, value = tmp9_Explain, lhs = tmp8_Explain, rhs = 5)])))])).toDefaultMessage()
              }
)
            }
            else -> { // BLOCK
              val tmp10_Explain: Boolean = EQEQ(arg0 = tmp7_Explain, arg1 = 5)
              assert(value = tmp10_Explain, lazyMessage = local fun <anonymous>(): String {
                return "\n" + CallExplanation(offset = 465, source = "    assert(((str?.lowercase() ?: fallback)?.length ?: default) == 5)", dispatchReceiver = null, extensionReceiver = null, valueArguments = mapOf</* null */, /* null */>(pairs = [Pair</* null */, /* null */>(first = "value", second = ValueArgument(startOffset = 11, endOffset = 67, expressions = listOf</* null */>(elements = [ValueExpression(startOffset = 13, endOffset = 16, displayOffset = 13, value = tmp0_Explain), ValueExpression(startOffset = 13, endOffset = 29, displayOffset = 18, value = tmp1_Explain), ValueExpression(startOffset = 13, endOffset = 50, displayOffset = 44, value = tmp7_Explain), EqualityExpression(startOffset = 11, endOffset = 67, displayOffset = 63, value = tmp10_Explain, lhs = tmp7_Explain, rhs = 5)])))])).toDefaultMessage()
              }
)
            }
          }
        }
      }
    }
  }
)
}

fun test3(str: String?): String {
  return expectThrowableMessage(block = local fun <anonymous>() {
    { // BLOCK
      val tmp0_Explain: String? = str
      val tmp1_Explain: String? = { // BLOCK
        val tmp_5: String? = tmp0_Explain
        when {
          EQEQ(arg0 = tmp_5, arg1 = null) -> null
          else -> tmp_5.lowercase()
        }
      }
      val tmp2_Explain: Int? = { // BLOCK
        val tmp_6: String? = tmp1_Explain
        when {
          EQEQ(arg0 = tmp_6, arg1 = null) -> null
          else -> tmp_6.<get-length>()
        }
      }
      when {
        EQEQ(arg0 = tmp2_Explain, arg1 = null) -> { // BLOCK
          val tmp3_Explain: Boolean = EQEQ(arg0 = { // BLOCK
            val tmp_7: Int? = tmp2_Explain
            0
          }, arg1 = 5)
          assert(value = tmp3_Explain, lazyMessage = local fun <anonymous>(): String {
            return "\n" + CallExplanation(offset = 588, source = "    assert((str?.lowercase()?.length ?: 0) == 5)", dispatchReceiver = null, extensionReceiver = null, valueArguments = mapOf</* null */, /* null */>(pairs = [Pair</* null */, /* null */>(first = "value", second = ValueArgument(startOffset = 11, endOffset = 47, expressions = listOf</* null */>(elements = [ValueExpression(startOffset = 12, endOffset = 15, displayOffset = 12, value = tmp0_Explain), ValueExpression(startOffset = 12, endOffset = 28, displayOffset = 17, value = tmp1_Explain), ValueExpression(startOffset = 12, endOffset = 36, displayOffset = 30, value = tmp2_Explain), EqualityExpression(startOffset = 11, endOffset = 47, displayOffset = 43, value = tmp3_Explain, lhs = { // BLOCK
              val tmp_8: Int? = tmp2_Explain
              0
            }, rhs = 5)])))])).toDefaultMessage()
          }
)
        }
        else -> { // BLOCK
          val tmp4_Explain: Boolean = EQEQ(arg0 = tmp2_Explain, arg1 = 5)
          assert(value = tmp4_Explain, lazyMessage = local fun <anonymous>(): String {
            return "\n" + CallExplanation(offset = 588, source = "    assert((str?.lowercase()?.length ?: 0) == 5)", dispatchReceiver = null, extensionReceiver = null, valueArguments = mapOf</* null */, /* null */>(pairs = [Pair</* null */, /* null */>(first = "value", second = ValueArgument(startOffset = 11, endOffset = 47, expressions = listOf</* null */>(elements = [ValueExpression(startOffset = 12, endOffset = 15, displayOffset = 12, value = tmp0_Explain), ValueExpression(startOffset = 12, endOffset = 28, displayOffset = 17, value = tmp1_Explain), ValueExpression(startOffset = 12, endOffset = 36, displayOffset = 30, value = tmp2_Explain), EqualityExpression(startOffset = 11, endOffset = 47, displayOffset = 43, value = tmp4_Explain, lhs = tmp2_Explain, rhs = 5)])))])).toDefaultMessage()
          }
)
        }
      }
    }
  }
)
}

